apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'me.tatarka.retrolambda'

apply plugin: 'realm-android'//REALM.IO

final VERSION_MAJOR = rootProject.ext.versionMajor // max two digits
final VERSION_MINOR = rootProject.ext.versionMinor // max two digits
final VERSION_PATCH = rootProject.ext.versionPatch // max two digits
final VERSION_BUILD = rootProject.ext.versionBuild // max three digits

dependencies
		{

			// DBFLOW basic
			final DBFLOW_VERSION = '4.0.0-beta2'
			apt "com.github.Raizlabs.DBFlow:dbflow-processor:$DBFLOW_VERSION"
			compile "com.github.Raizlabs.DBFlow:dbflow-core:$DBFLOW_VERSION"
			compile "com.github.Raizlabs.DBFlow:dbflow:$DBFLOW_VERSION"
			// DBFLOW sql-cipher database encyrption (optional)
			compile "com.github.Raizlabs.DBFlow:dbflow-sqlcipher:$DBFLOW_VERSION"
			final SQL_CIPHER_VERSION = "3.5.4"
			compile "net.zetetic:android-database-sqlcipher:$SQL_CIPHER_VERSION@aar"

			final SUPPORT_LIB_VERSION = '25.0.0'
			compile "com.android.support:support-v4:$SUPPORT_LIB_VERSION"
			compile "com.android.support:appcompat-v7:$SUPPORT_LIB_VERSION"
			compile "com.android.support:recyclerview-v7:$SUPPORT_LIB_VERSION"
			compile "com.android.support:cardview-v7:$SUPPORT_LIB_VERSION"
			compile "com.android.support:design:$SUPPORT_LIB_VERSION"
			compile "com.android.support:palette-v7:$SUPPORT_LIB_VERSION"
			compile "com.android.support:percent:$SUPPORT_LIB_VERSION"

			final RETROFIT_VERSION = '2.1.0'
			compile "com.squareup.retrofit2:converter-gson:$RETROFIT_VERSION"
			compile "com.squareup.retrofit2:retrofit:$RETROFIT_VERSION"
			compile 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'
			compile "com.squareup.okhttp3:logging-interceptor:3.4.1"
			// https://mvnrepository.com/artifact/com.squareup.retrofit2/adapter-rxjava

			final RX_JAVA_VERSION = "2.0.0"
			compile "io.reactivex.rxjava2:rxjava:$RX_JAVA_VERSION"
			compile "io.reactivex.rxjava2:rxandroid:$RX_JAVA_VERSION"

			compile "com.jakewharton.timber:timber:4.3.1"
			final PARCELER_VERSION = "1.1.6"
			compile "org.parceler:parceler-api:$PARCELER_VERSION"
			apt "org.parceler:parceler:$PARCELER_VERSION"

			final DAGGER_VERSION = "2.7"
			apt "com.google.dagger:dagger-compiler:$DAGGER_VERSION"
			compile "com.google.dagger:dagger:$DAGGER_VERSION"
			provided "javax.annotation:jsr250-api:1.0"

			compile "cz.kinst.jakub:stateful-layout:1.1.5"
			compile "cz.kinst.jakub:viewmodelbinding:0.9.4"
			compile "me.tatarka.bindingcollectionadapter:bindingcollectionadapter:1.3.0"
			compile "me.tatarka.bindingcollectionadapter:bindingcollectionadapter-recyclerview:1.3.0"

			compile "com.facebook.stetho:stetho:1.4.1"
			compile 'com.uphyca:stetho_realm:2.0.0'

			final LEAK_CANARY_VERSION = '1.5'
			debugCompile "com.squareup.leakcanary:leakcanary-android:$LEAK_CANARY_VERSION"
			releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:$LEAK_CANARY_VERSION"
			testCompile "com.squareup.leakcanary:leakcanary-android-no-op:$LEAK_CANARY_VERSION"

			compile fileTree(include: ['*.jar'], dir: 'libs')
		}


android
		{
			compileSdkVersion rootProject.ext.compileSdkVersion
			buildToolsVersion rootProject.ext.buildToolsVersion

			lintOptions {
				abortOnError false
			}

			compileOptions {
				sourceCompatibility JavaVersion.VERSION_1_8
				targetCompatibility JavaVersion.VERSION_1_8
			}

			defaultConfig
					{
						minSdkVersion rootProject.ext.minSdkVersion
						targetSdkVersion rootProject.ext.targetSdkVersion
						versionCode VERSION_MAJOR * 10000000 + VERSION_MINOR * 100000 + VERSION_PATCH * 1000 + VERSION_BUILD
						versionName "${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}"
					}

			signingConfigs
					{
						release
								{
									// passwords and alias are obtained via askForPasswords task
									storeFile file("../${project.property('keystore.file')}")
									storePassword ""
									keyAlias ""
									keyPassword ""
								}
					}

			buildTypes
					{
						debug
								{
									versionNameSuffix "-debug"
								}

						release
								{
									signingConfig signingConfigs.release
									zipAlignEnabled true
									minifyEnabled false
									shrinkResources false
									proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
								}
					}

			applicationVariants.all
					{
						variant ->
							if(variant.buildType.name.equals("release")) {
								variant.outputs.each
										{
											output ->
												def outputFile = output.outputFile
												def date = new Date()
												if(outputFile != null && outputFile.name.endsWith('.apk')) {
													def fileName = outputFile.name.replace(
															"mobile",
															"db-showcase" + defaultConfig.versionName + "-" + defaultConfig.versionCode + "-" + date.format('yyyyMMdd'))
													output.outputFile = new File((String) outputFile.parent, (String) fileName)
												}
										}
							}
					}
			dataBinding
					{
						enabled = true
					}
		}


task askForPasswords <<
		{
			def storePass
			def keyAlias
			def keyPass

			def keystorePropertiesFile = new File((String) project.property("keystore.properties"))

			if(project.hasProperty("keystore.properties") && keystorePropertiesFile.exists()) {
				println "Loading keystore passwords from property file..."
				Properties properties = new Properties()
				properties.load(new FileInputStream(keystorePropertiesFile))
				storePass = properties['keystore.store.password']
				keyAlias = properties['keystore.key.alias']
				keyPass = properties['keystore.key.password']
			} else {
				println "Getting keystore passwords from user input..."
				storePass = new String(System.console().readPassword("\nStore password: "))
				keyAlias = new String(System.console().readLine("Key alias: "))
				keyPass = new String(System.console().readPassword("Key password: "))
			}

			android.signingConfigs.release.storePassword = storePass
			android.signingConfigs.release.keyAlias = keyAlias
			android.signingConfigs.release.keyPassword = keyPass
		}


tasks.whenTaskAdded
		{
			theTask ->
				if(theTask.name.equals("packageRelease")) {
					theTask.dependsOn "askForPasswords"
				}
		}
