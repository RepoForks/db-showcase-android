plugins {
	id "me.tatarka.retrolambda" version "3.2.5"
}

apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'

apply plugin: 'realm-android'//REALM.IO

final VERSION_MAJOR = rootProject.ext.versionMajor // max two digits
final VERSION_MINOR = rootProject.ext.versionMinor // max two digits
final VERSION_PATCH = rootProject.ext.versionPatch // max two digits
final VERSION_BUILD = rootProject.ext.versionBuild // max three digits

dependencies
		{

			// DBFLOW basic
			apt "com.github.Raizlabs.DBFlow:dbflow-processor:$rootProject.ext.dbflow_version"
			// DBFLOW sql-cipher database encyrption (optional)
			compile "com.github.Raizlabs.DBFlow:dbflow-sqlcipher:$rootProject.ext.dbflow_version"

			compile "com.android.support:support-v4:$rootProject.ext.supportLibVersion"
			compile "com.android.support:appcompat-v7:$rootProject.ext.supportLibVersion"
			compile "com.android.support:recyclerview-v7:$rootProject.ext.supportLibVersion"
			compile "com.android.support:cardview-v7:$rootProject.ext.supportLibVersion"
			compile "com.android.support:design:$rootProject.ext.supportLibVersion"
			compile "com.android.support:palette-v7:$rootProject.ext.supportLibVersion"
			compile "com.squareup.retrofit2:converter-gson:$rootProject.ext.retrofitVersion"
			compile "com.squareup.retrofit2:retrofit:$rootProject.ext.retrofitVersion"
			compile "com.squareup.retrofit2:adapter-rxjava:$rootProject.ext.retrofitVersion"
			compile "com.squareup.okhttp3:logging-interceptor:$rootProject.ext.loggingInterceptor"
			compile "io.reactivex:rxandroid:$rootProject.ext.rxAndroid"
			compile "io.reactivex:rxjava:$rootProject.ext.rxJavaVersion"
			compile "io.reactivex:rxjava-math:$rootProject.ext.rxJavaMathVersion"
			compile "com.jakewharton.timber:timber:$rootProject.ext.timberVersion"
			compile "org.parceler:parceler-api:$rootProject.ext.parcelerVersion"
			apt "org.parceler:parceler:$rootProject.ext.parcelerVersion"
			apt "com.google.dagger:dagger-compiler:${rootProject.ext.daggerVersion}"
			compile "com.google.dagger:dagger:${rootProject.ext.daggerVersion}"
			provided "javax.annotation:jsr250-api:${rootProject.ext.jsr250Version}"

			compile "cz.kinst.jakub:stateful-layout:${rootProject.ext.kinstStateful}"
			compile "cz.kinst.jakub:viewmodelbinding:${rootProject.ext.kinstViewBinding}"

            compile "com.facebook.stetho:stetho:${rootProject.ext.stethoVersion}"
            debugCompile "com.squareup.leakcanary:leakcanary-android:${rootProject.ext.leakCanary}"
            releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:${rootProject.ext.leakCanary}"
            testCompile "com.squareup.leakcanary:leakcanary-android-no-op:${rootProject.ext.leakCanary}"

            compile fileTree(include: ['*.jar'], dir: 'libs')
		}


android
		{
			compileSdkVersion rootProject.ext.compileSdkVersion
			buildToolsVersion rootProject.ext.buildToolsVersion

			lintOptions {
				abortOnError false
			}

			compileOptions {
				sourceCompatibility JavaVersion.VERSION_1_8
				targetCompatibility JavaVersion.VERSION_1_8
			}

			defaultConfig
					{
						minSdkVersion rootProject.ext.minSdkVersion
						targetSdkVersion rootProject.ext.targetSdkVersion
						versionCode VERSION_MAJOR * 10000000 + VERSION_MINOR * 100000 + VERSION_PATCH * 1000 + VERSION_BUILD
						versionName "${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}"
					}

			signingConfigs
					{
						release
								{
									// passwords and alias are obtained via askForPasswords task
									storeFile file("../${project.property('keystore.file')}")
									storePassword ""
									keyAlias ""
									keyPassword ""
								}
					}

			buildTypes
					{
						debug
								{
									buildConfigField "boolean", "LOGS", "true"

									versionNameSuffix "-debug"
								}

						release
								{
									buildConfigField "boolean", "LOGS", "false"

									signingConfig signingConfigs.release
									zipAlignEnabled true
									minifyEnabled false
									shrinkResources false
									proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
								}
					}
			productFlavors {
                dbFlow {
                    buildConfigField "String", "DB_SHOWCASE","\"DB_FLOW\""
                }

                realm {
                    buildConfigField "String", "DB_SHOWCASE","\"REALM_IO\""
                }


			}

			applicationVariants.all
					{
						variant ->
							if(variant.buildType.name.equals("release"))
							{
								variant.outputs.each
										{
											output ->
												def outputFile = output.outputFile
												def date = new Date()
												if(outputFile != null && outputFile.name.endsWith('.apk'))
												{
													def fileName = outputFile.name.replace(
															"mobile",
															"db-showcase" + defaultConfig.versionName + "-" + defaultConfig.versionCode + "-" + date.format('yyyyMMdd'))
													output.outputFile = new File((String) outputFile.parent, (String) fileName)
												}
										}
							}
					}
			dataBinding
					{
						enabled = true
					}
		}


task askForPasswords <<
		{
			def storePass
			def keyAlias
			def keyPass

			def keystorePropertiesFile = new File((String) project.property("keystore.properties"))

			if(project.hasProperty("keystore.properties") && keystorePropertiesFile.exists())
			{
				println "Loading keystore passwords from property file..."
				Properties properties = new Properties()
				properties.load(new FileInputStream(keystorePropertiesFile))
				storePass = properties['keystore.store.password']
				keyAlias = properties['keystore.key.alias']
				keyPass = properties['keystore.key.password']
			}
			else
			{
				println "Getting keystore passwords from user input..."
				storePass = new String(System.console().readPassword("\nStore password: "))
				keyAlias = new String(System.console().readLine("Key alias: "))
				keyPass = new String(System.console().readPassword("Key password: "))
			}

			android.signingConfigs.release.storePassword = storePass
			android.signingConfigs.release.keyAlias = keyAlias
			android.signingConfigs.release.keyPassword = keyPass
		}


tasks.whenTaskAdded
		{
			theTask ->
				if(theTask.name.equals("packageRelease"))
				{
					theTask.dependsOn "askForPasswords"
				}
		}
